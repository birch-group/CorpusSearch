package drawtree;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import syntree.*;
import basicinfo.*;
import javax.swing.*;
import search_result.*;

/**
DrawGraphicTree takes as input a ChangeGraphicTree, where the x and
y coordinates of each graphic node have been worked out.  */

public class DrawGraphicTree extends TreeCanvas {

    protected static Graphics my_graphite;
    protected static FontMetrics font_met;

    public  static void drawTree (ChangeGraphicTree cgt, Graphics graphite) {

	my_graphite = graphite;
	//font_met = getFontMetrics(graphite.getFont());
	CorpusDraw.toole.treeve.treece.setSizeCurrTree();
	if (cgt.isEmpty()) { 
	    return; }
	if (!lapse.willCollapse()) {
	    bottomUp(cgt);  return; }
	else {
	    bottomUpCollapse(cgt); return; } }

    protected  static void bottomUpCollapse (ChangeGraphicTree cgt) {
	int i,k, end_collapse;
	Node leaf;
	GraphicNode gleaf;
  
	// set nodes in BitSet collapsed_bits, corresponding 
	// to all collapsed nodes in tree.
	lapse.setCollapsedBits();
	// first, draw text leaves of tree.
	tree_loop:  for (i = 0; i < cgt.size(); i++) {
	    gleaf = cgt.graphicNodeAt(i);
	    leaf = gleaf.getNode();
	    if (cgt.IsLeafText(leaf)) {
		drawCollapsedLeaves(cgt, i);
		if (lapse.isCollapsed(i)) {
		    // advance i past the collapsed subtree.
		    end_collapse = lapse.getCollapsedEnd(leaf);
		    i = end_collapse;
		    continue tree_loop; }
		else {
		    drawGNodeString(cgt, gleaf); }}}
	for (k = cgt.getMaxDepth(); k >= 0; k --) {
	    subBottomCollapse(cgt, k); }
	//	cgt.PrintToSystemErr();
    }

    protected  static void drawCollapsedLeaves(ChangeGraphicTree cgt, int i) {
	int j;
	Node leaf, coll_root;
	GraphicNode gleaf;
	Vector leaves;

	leaves = lapse.getCollapsedLeaves(i);
	coll_root = lapse.getCollRoot(leaves);
	for (j = 0; j < leaves.size(); j++) {
	    leaf = (Node)leaves.elementAt(j);
	    gleaf = cgt.getGNode(leaf);
	    //drawGNodeString(cgt, gleaf); }
	    drawEmptyLeaf(cgt, gleaf); }
	
	return; }

    protected  static void bottomUp (ChangeGraphicTree cgt) {
	int i, k;
	Node leaf;
	GraphicNode gleaf;

	// first, draw text leaves of tree.
	for (i = 0; i < cgt.size(); i++) {
	    gleaf = cgt.graphicNodeAt(i);
	    leaf = gleaf.getNode();
	    if (cgt.IsLeafText(leaf)) {
		drawGNodeString(cgt, gleaf); } }
	for (k = cgt.getMaxDepth(); k >= 0; k --) {
	    subBottom(cgt, k); }
	//	cgt.PrintToSystemErr();
    }
	    
    protected  static void subBottom(ChangeGraphicTree cgt, int depth) {
	int i;
	Node depth_node = new Node("NULL");
	GraphicNode gnode;
	Vector layer;

	layer = (cgt.getChangeTree()).getAllNodesforDepth(depth);
	layer_loop: for (i = 0; i < layer.size(); i++) {
	    depth_node = (Node)layer.elementAt(i); 
	    if ((cgt.getChangeTree()).IsLeafText(depth_node)) {
		continue layer_loop;  }
 	    gnode = cgt.getGNode(depth_node);
 	    drawGStringLines(cgt, gnode); } }

     protected  static void subBottomCollapse(ChangeGraphicTree cgt, 
					     int depth) {
 	int i, j, k, y_end;
 	GraphicNode gmom, gdepth;
 	Node first_kid, last_kid, depth_node = new Node("NULL");
 	Vector layer, depth_daughters;

 	layer = (cgt.getChangeTree()).getAllNodesforDepth(depth);
 	layer_loop: for (i = 0; i < layer.size(); i++) {
 	    depth_node = (Node)layer.elementAt(i);
 	    // is depth_node the root of a collapsed subtree?
 	    if (lapse.isCollapseSubRoot(depth_node)) {
		gmom = cgt.getGNode(depth_node);
		drawGStringLinesCollapseRoot(cgt, gmom);
 		continue layer_loop; }
 	    if ((cgt.getChangeTree()).IsLeafText(depth_node) || 
 		lapse.isCollapsed(depth_node.getIndex_int())) { 
 		continue layer_loop; }
	    gdepth = cgt.getGNode(depth_node);
 	    drawGStringLines(cgt, gdepth);
 	}
     }

     protected  static void drawMomLines (ChangeGraphicTree cgt, 
					 GraphicNode gmom) {
 	Vector daughters;
 	Node nodal, mom;
 	GraphicNode gnode;
 	int i, mom_x, mom_y, daught_x, daught_y;

	try {
	    my_graphite.setColor(ToolColors.LINE);
	    mom = gmom.getNode();
	    if (mom.IsNullNode() || mom.getIndex_int() == 0) { return; }
	    if (cgt.sparse.getRootNode().equals(mom)) {
		drawMomRootLines(cgt, gmom);
	        return; }
	    daughters = (cgt.getChangeTree()).GetDaughters(mom);
	    mom_x = cgt.getMiddleX(gmom);
	    mom_y = gmom.getYStart() + lengthPerFont(cgt, 1);
	    for (i = 0; i < daughters.size(); i++) {
		nodal = (Node)daughters.elementAt(i);
		gnode = cgt.getGNode(nodal);
		if (daughters.size() == 1) {
		    daught_x = mom_x; }
		else {
		    daught_x = cgt.getMiddleX(gnode); }
		daught_y = gnode.getYEnd();
		my_graphite.drawLine(mom_x, mom_y, daught_x, daught_y); } }
	catch (Exception e) {
	    System.err.println("in DrawGraphicTree.drawMomLines:  ");
	    System.exit(1); }
	finally { return; } 
     }

    //draw special "bent" lines from root to root's daughters.
     protected  static void drawMomRootLines (ChangeGraphicTree cgt, 
					 GraphicNode gmom) {
 	Vector daughters;
 	Node nodal, mom;
 	GraphicNode gnode;
 	int i, mom_x, mom_y, daught_x, daught_y;

	try {
	    my_graphite.setColor(ToolColors.LINE);
	    mom = gmom.getNode();
	    if (mom.IsNullNode() || mom.getIndex_int() == 0) { return; }
	    daughters = (cgt.getChangeTree()).GetDaughters(mom);
	    mom_x = cgt.getMiddleX(gmom);
	    mom_y = gmom.getYStart() + lengthPerFont(cgt, 1);
	    for (i = 0; i < daughters.size(); i++) {
		nodal = (Node)daughters.elementAt(i);
		gnode = cgt.getGNode(nodal);
		if (daughters.size() == 1) {
		    daught_x = mom_x; }
		else {
		    daught_x = cgt.getMiddleX(gnode); }
		daught_y = gnode.getYEnd();
		// first, draw vertical line.
		my_graphite.drawLine(daught_x, mom_y, daught_x, daught_y);
		my_graphite.drawLine(daught_x, mom_y, mom_x, mom_y);
		//my_graphite.drawLine(mom_x, mom_y, daught_x, daught_y); 
	    } }
	catch (Exception e) {
	    System.err.println("in DrawGraphicTree.drawMomLines:  ");
	    System.exit(1); }
	finally { return; } 
     }

    protected static void drawGCircle (ChangeGraphicTree cgt, 
				      GraphicNode gmom) {
 	Vector text_leaves;
 	Node mom, last, first;
 	GraphicNode glast, gfirst;
 	int i, mom_x, mom_y, daught_x_start, daught_x_end, daught_y;

	my_graphite.setColor(ToolColors.COLLAPSE);
 	mom_x = cgt.getMiddleX(gmom);
 	mom_y = gmom.getYStart() + lengthPerFont(cgt, 1);
	my_graphite.drawOval(mom_x, mom_y, 8, 8);
	return; }
	

     protected  static void drawTriangle (ChangeGraphicTree cgt, 
					 GraphicNode gmom) {
 	Vector text_leaves;
 	Node mom, last, first;
 	GraphicNode glast, gfirst;
 	int i, mom_x, mom_y, daught_x_start, daught_x_end, daught_y;

 	my_graphite.setColor(ToolColors.LINE);
 	mom = gmom.getNode();
 	text_leaves = (cgt.getChangeTree()).getText(mom);
 	mom_x = cgt.getMiddleX(gmom);
 	mom_y = gmom.getYStart() + lengthPerFont(cgt, 1);
 	//last piece of text has maximum end_x value.
 	last = (Node)text_leaves.lastElement();
 	glast = cgt.getGNode(last);
 	daught_x_start = glast.getXStart();
 	daught_x_end = glast.getXEnd();
 	// first piece of text has minimum y value.
 	first = (Node)text_leaves.firstElement();
 	gfirst = cgt.getGNode(first);
 	daught_y = gfirst.getYEnd();
 	//	if (daught_y < mom_y) {
 	//  System.err.println("problem!  must redraw:  ");
 	//  System.err.println("daught_y, mom_y:  "+daught_y+", "+mom_y); }

 	my_graphite.drawLine(mom_x, mom_y, daught_x_start, daught_y);
 	my_graphite.drawLine(daught_x_start, daught_y, 
				     daught_x_end, daught_y);
 	my_graphite.drawLine(daught_x_end, daught_y, mom_x, mom_y);
 	my_graphite.setColor(ToolColors.TEXT);
     }

     protected  static void drawShowOnlyLines (ChangeGraphicTree cgt, 
				       GraphicNode gmom) {
 	Vector text;
 	Node nodal, mom, first, last;
 	GraphicNode gnode;
 	int i, mom_x, mom_y, text_x, text_y, y_span;

 	my_graphite.setColor(ToolColors.LINE);
 	mom = gmom.getNode();
 	text = (cgt.getChangeTree()).getText(mom);
 	mom_x = cgt.getMiddleX(gmom);
 	mom_y = gmom.getYStart() + lengthPerFont(cgt, 1);
 	if (text.size() == 1) {
 	    text_x = mom_x; 
 	    first = (Node)text.firstElement();
 	    first = getOnlyAncestor(cgt.getChangeTree(), first, mom);
 	    gnode = cgt.getGNode(first);
 	    text_y = gnode.getYEnd();
 	    my_graphite.drawLine(mom_x, mom_y, text_x, text_y); }
 	else {
 	    y_span = lengthPerFont(cgt, cgt.get_Y_DIFF())/2;
 	    first = (Node)text.firstElement();
 	    first = getOnlyAncestor(cgt.getChangeTree(), first, mom);
 	    gnode = cgt.getGNode(first);
 	    text_x = cgt.getMiddleX(gnode);
 	    text_y = gnode.getYEnd();
 	    if (text_y-mom_y+y_span<2*lengthPerFont(cgt, cgt.get_Y_DIFF())) {
 		my_graphite.drawLine(mom_x, mom_y, text_x, text_y); }
 	    else {
 		my_graphite.drawLine(mom_x, mom_y, text_x, 
					     mom_y + y_span);
 		my_graphite.drawLine(text_x, mom_y + y_span, 
					     text_x, text_y); }
 	    last = (Node)text.lastElement();
 	    last = getOnlyAncestor(cgt.getChangeTree(), last, mom);
 	    gnode = cgt.getGNode(last);
 	    text_x = cgt.getMiddleX(gnode);
 	    text_y = gnode.getYEnd();
 	    if (text_y-mom_y+y_span<2*lengthPerFont(cgt, cgt.get_Y_DIFF())) {
 		my_graphite.drawLine(mom_x, mom_y, text_x, text_y); }
 	    else {
 		my_graphite.drawLine(mom_x, mom_y, text_x, 
					     mom_y + y_span);
 		my_graphite.drawLine(text_x, mom_y + y_span, 
					     text_x, text_y); } }
     }

     protected  static Node getOnlyAncestor(ChangeTree sparse, Node nodal, 
					   Node stop) {
 	Node anc = nodal, best = nodal;

 	while (!anc.IsNullNode() && !anc.equals(stop)) {
 	    anc = sparse.GetMother(anc);
 	    if (anc.IsNullNode() || anc.equals(stop)) {
 		return best; }
 	    if (CorpusDraw.show_list.hasMatch(anc)) {
 		best = anc; } }
 	return anc; }

    protected  static void drawGStringLines(ChangeGraphicTree cgt, 
					   GraphicNode gnode) {

 	if (CorpusDraw.show_only && !CorpusDraw.show_list.isEmpty()) {
 	    drawShowOnly(cgt, gnode); 
 	    return; }
 	drawGNodeString(cgt, gnode); 
 	drawMomLines(cgt, gnode); }

     protected static void drawGStringLinesCollapseRoot(ChangeGraphicTree cgt, 
							GraphicNode gnode) {

 	//gnode.PrintToSystemErr();
 	if (CorpusDraw.show_only && !CorpusDraw.show_list.isEmpty() &&
 	    !CorpusDraw.show_list.hasMatch(gnode.getLabel())) {
 		return; }
	drawCollGNodeString(cgt, gnode); 
 	//drawTriangle(cgt, gnode); }
	drawGCircle(cgt, gnode); }

     protected  static void drawShowOnly(ChangeGraphicTree cgt, 
					GraphicNode gnode) { 

	int dex; 

	if (!CorpusDraw.show_list.hasMatch(gnode.getLabel())) {
	    return; } 
	if (!lapse.rootsEmpty()) {
	    dex = (gnode.getNode()).getIndex_int();
	    if (lapse.isCollapsed(dex)) { return; } }
	drawGNodeString(cgt, gnode);
	drawShowOnlyLines(cgt, gnode);
    }

    protected  static void drawGNodeString(ChangeGraphicTree cgt, 
					  GraphicNode gnode) {
	try {
	    if (gnode.isHighlighted1()) { drawHighlight1(gnode); }
	    if (gnode.isHighlighted2()) { drawHighlight2(gnode); }
	    if (cgt.getsBullet(gnode)) { drawBullet(cgt, gnode); }
	    my_graphite.setColor(ToolColors.TEXT);
	    if (!cgt.justInits()) {
		my_graphite.drawString(gnode.getLabel(), 
				       gnode.getXStart(), 
				       gnode.getYStart()); }
	    else {
		my_graphite.drawString(gnode.getLabel().substring(0, 1),
				       gnode.getXStart(),
				       gnode.getYStart()); }
	    if (gnode.isSelected()) { drawSelect(cgt, gnode); } }
        catch (Exception e) { e.printStackTrace(); }
        finally { return; } }

    protected  static void drawCollGNodeString(ChangeGraphicTree cgt, 
					  GraphicNode gnode) {
	try {
	    if (gnode.isHighlighted1()) { drawHighlight1(gnode); }
	    if (gnode.isHighlighted2()) { drawHighlight2(gnode); }
	    if (cgt.getsBullet(gnode)) { drawBullet(cgt, gnode); }
	    my_graphite.setColor(ToolColors.COLLAPSE);
	    my_graphite.drawString(gnode.getLabel(),
				   gnode.getXStart(),
				   gnode.getYStart()); 
	    if (gnode.isSelected()) {
		drawSelect(cgt, gnode); } }
        catch (Exception e) { e.printStackTrace(); }
        finally { return; } }

    protected  static void drawEmptyLeaf(ChangeGraphicTree cgt, 
					  GraphicNode gnode) {
	try {
	    if (gnode.isHighlighted1()) {
	        drawHighlight1(gnode); }
	    if (gnode.isHighlighted2()) {
		drawHighlight2(gnode); }
	    if (cgt.getsBullet(gnode)) {
		drawBullet(cgt, gnode); }
	    my_graphite.setColor(ToolColors.TEXT);
	    //if (!cgt.justInits()) {
	    //my_graphite.drawString(gnode.getLabel(), 
	    //		       gnode.getXStart(), 
	    //		       gnode.getYStart()); }
	    //	    else {
	    //my_graphite.drawString(gnode.getLabel().substring(0, 1),
	    //		       gnode.getXStart(),
	    //		       gnode.getYStart()); }
	    if (gnode.isSelected()) {
		drawSelect(cgt, gnode); }
	}
        catch (Exception e) { e.printStackTrace(); }
        finally { return; } }

    protected static void whichSelect(ChangeGraphicTree cgt,
				      GraphicNode gnode) {
	if (gnode.isSelected()) {
	    drawSelect(cgt, gnode); return; }
	drawUnSelect(cgt, gnode); return; }

    protected  static void drawSelect(ChangeGraphicTree cgt, 
				     GraphicNode gnode) {
	my_graphite.setColor(ToolColors.SELECT); 
	drawSelectRectangle(cgt, gnode); }

   
    
    protected static void drawUnSelect(ChangeGraphicTree cgt, 
				       GraphicNode gnode) {
	my_graphite.setColor(ToolColors.BACKGROUND); 
	drawSelectRectangle(cgt, gnode); }

    protected static void drawSelectRectangle(ChangeGraphicTree cgt,
					      GraphicNode gnode) {

	//my_length = font_met.stringWidth(gnode.getLabel());
	my_graphite.drawRect(gnode.getXStart() - 6, gnode.getYEnd(),
			     //my_length + 6,
			     gnode.getXEnd() - gnode.getXStart() + 6, 
			     gnode.getYStart() - gnode.getYEnd()); }


    protected  static void drawHighlight1(GraphicNode gnode) {
	my_graphite.setColor(ToolColors.HIGHLIGHT1); 
	fillHighlightRect(gnode); }

    protected  static void drawHighlight2(GraphicNode gnode) {
	my_graphite.setColor(ToolColors.HIGHLIGHT2); 
	fillHighlightRect(gnode); }

    protected static void fillHighlightRect(GraphicNode gnode) {
	my_graphite.fillRect(gnode.getXStart() - 5, gnode.getYEnd() + 1, 
			  gnode.getXEnd() - gnode.getXStart() + 5, 
			  gnode.getYStart() - gnode.getYEnd() - 1); }

    protected static void drawBullet(ChangeGraphicTree cgt, 
				     GraphicNode gnode) {
	my_graphite.setColor(ToolColors.BULLET);
	subBullet(cgt, gnode); }

    protected static void subBullet(ChangeGraphicTree cgt, 
				    GraphicNode gnode) {
	my_graphite.fillOval(cgt.getMiddleX(gnode), 
			     gnode.getYEnd() - 8, 6, 6); } 

    protected static void clearBullet(ChangeGraphicTree cgt, 
				      GraphicNode gnode) {
	my_graphite.setColor(ToolColors.BACKGROUND);
	subBullet(cgt, gnode); }

    protected  static int lengthPerFont (ChangeGraphicTree cgt, String label) {
	return ((label.length())*(cgt.FONT_SZ/2)); }

    protected  static int lengthPerFont (ChangeGraphicTree cgt, int x) {
	return ((x*cgt.FONT_SZ)/2); }

}

