/* Generated By:JavaCC: Do not edit this line. ParseFrames.java */
package FramesParse;

import java.util.*;
import java.io.*;

import basicinfo.*;
import frames.*;
import syntree.*;

abstract class FramesNode {
    public abstract SentenceFrame evaluate(SynTree sparse);
    public abstract void PrintToSystemErr();
}

class ArgNode{
     String args;
     Vector args_for_search;

    public ArgNode(String argo) {
        this.args = argo;
        this.args_for_search = PipeList.MakeList(this.args);
        //this.PrintToSystemErr(); }
    }

    public void PrintToSystemErr() {
        System.err.println("ArgNode:  ");
        System.err.println(args_for_search); }
}

abstract class BinarySearchNode extends FramesNode {
    ArgNode arg1, arg2;
    Vector x_List, y_List;

    protected BinarySearchNode() {}

    protected BinarySearchNode(ArgNode arg1, ArgNode arg2)
        { Init(arg1, arg2); }

    protected void Init(ArgNode arg1, ArgNode arg2) {
        this.arg1 = arg1;
        this.arg2 = arg2;
        this.x_List = arg1.args_for_search;
        this.y_List = arg2.args_for_search;
        //this.PrintToSystemErr(); }
    }

    public void PrintToSystemErr () {
        System.err.println("in BinarySearchNode:  ");
        System.err.println("x_List:  " + x_List);
        System.err.println("y_list:  " + y_List); }
}

class OverNode extends BinarySearchNode { // used for local frames.

    public OverNode (ArgNode arg1, ArgNode arg2) {
        super.Init(arg1, arg2); }

    public SentenceFrame evaluate(SynTree sparse) {
       return (BuildFrames.OneSentence(x_List, y_List)); }
}

public class ParseFrames implements ParseFramesConstants {
    private static FramesNode qn;

    public static void main(String args[]) throws ParseException {
      System.err.println("BULLWINKLE!  using new parser:  Enter query: ");
      ParseFrames parser = new ParseFrames(System.in);
      FramesNode qn = parser.Atom_Stmt();
      SynTree sparse = new SynTree();
      SentenceFrame sr = qn.evaluate(sparse);
      sr.PrintToSystemErr();
      System.err.println("Parsed OK.");
    }

    public static void makeFramesTree(StringReader sread)
               throws ParseException {
      ParseFrames parser = new ParseFrames(sread);
      qn = parser.Atom_Stmt();
      FlushQuery();
      return ;
    }

    public static SentenceFrame evaluable (SynTree sparse) {
      return (qn.evaluate(sparse)); }

  static final public void FlushQuery() throws ParseException {
    jj_consume_token(0);
            {if (true) return;}
  }

  static final public FramesNode Atom_Stmt() throws ParseException {
    FramesNode qn;
    ArgNode arg1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_PAREN:
      jj_consume_token(OPEN_PAREN);
      qn = Atom_Stmt();
      jj_consume_token(CLOSE_PAREN);
          {if (true) return qn;}
      break;
    case ARG:
      arg1 = Arg();
      qn = UnBinTriCall(arg1);
          {if (true) return qn;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public FramesNode UnBinTriCall(ArgNode arg1) throws ParseException {
   FramesNode qn;
   Token sf_token=null;
   ArgNode arg2;
    // Binary Call.
        sf_token = jj_consume_token(OVER);
    arg2 = Arg();
          {if (true) return new OverNode(arg1, arg2);}
    throw new Error("Missing return statement in function");
  }

  static final public ArgNode Arg() throws ParseException {
    ArgNode an;
    Token sf_token=null;
    String sf_name;
    sf_token = jj_consume_token(ARG);
        sf_name = sf_token.toString();
        an = new ArgNode(sf_name);
        {if (true) return an;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public ParseFramesTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[1];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x480,};
   }

  public ParseFrames(java.io.InputStream stream) {
     this(stream, null);
  }
  public ParseFrames(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParseFramesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public ParseFrames(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParseFramesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public ParseFrames(ParseFramesTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public void ReInit(ParseFramesTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[23];
    for (int i = 0; i < 23; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 1; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
