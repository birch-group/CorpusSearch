//  Copyright 2010 Beth Randall

/*********************************
This file is part of CorpusSearch.

CorpusSearch is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

CorpusSearch is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with CorpusSearch.  If not, see <http://www.gnu.org/licenses/>.
************************************/


/*
  unsorted list of LexEntry objects generated by one sentence.
 */
package tag_list;

import java.util.*;
import syntree.*;
import basicinfo.*;

public class SentenceList {

    // one list for syntactic tags, one for POS tags.
    private Vector syn_list, pos_list, trace_list;

    public SentenceList() {
	syn_list = new Vector();
        pos_list = new Vector();
	trace_list = new Vector(); }
 
    public void addPOSEntry(String label, Vector pos_divide) {
	LexEntry lax = new LexEntry(label, pos_divide);
	pos_list.addElement(lax); }

    public void addSynEntry(String label, Vector syn_divide) {
	LexEntry lax = new LexEntry(label, syn_divide);
	syn_list.addElement(lax); }

    public void addTraceEntry(String label, Vector trace_divide) {
	LexEntry lax = new LexEntry(label, trace_divide);
	trace_list.addElement(lax); }

    public Vector getPOSList() {
	return pos_list; }

    public Vector getSynList() {
	return syn_list; }

    public Vector getTraceList() {
	return trace_list; }

    public LexEntry entryAtPOS(int i) {
	return ((LexEntry)pos_list.elementAt(i)); }

    public LexEntry entryAtSyn(int i) {
	return ((LexEntry)syn_list.elementAt(i)); }

    public boolean isEmpty() {
	if (pos_list.isEmpty() && syn_list.isEmpty()) {
	    return true; }
	return false; }

    public boolean isEmptyPOS() {
	return (pos_list.isEmpty()); }

    public boolean isEmptySyn() {
	return (syn_list.isEmpty()); }

    public int sizePOS() {
	return(pos_list.size()); }

    public int sizeSyn() {
	return (syn_list.size()); }

    public int size() {
	return (pos_list.size() + syn_list.size()); }

    public void PrintToSystemErr() {
	this.PrintToSystemErr(0, this.sizePOS(), 0, this.sizeSyn()); }

    public void PrintToSystemErr(int start, int end) {
	this.PrintToSystemErr(start, end, start, end); }

    public void PrintToSystemErr(int start1, int end1, int start2, int end2) {
	LexEntry lax;
	int i; 

	System.err.println("SentenceList:  POS tags: ");
	if (start1 < 0) { start1 = 0; }
	if (end1 > this.sizePOS()) { end1 = this.sizePOS(); }
	for (i = start1; i < end1; i++) {
	    lax = (LexEntry)pos_list.elementAt(i);
	    lax.PrintToSystemErr(); }
	System.err.println("syntactic tags: ");
	if (start2 < 0) { start2 = 0; }
	if (end2 > this.sizeSyn()) { end2 = this.sizeSyn(); }
	for (i = start2; i < end2; i++) {
	    lax = (LexEntry)syn_list.elementAt(i);
	    lax.PrintToSystemErr(); }
    } 

} 
