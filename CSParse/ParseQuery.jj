/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
import  * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
	JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(ParseQuery)

package CSParse;

import java.util.*;
import java.io.*;

import command.*;
import syntree.*;
import search_result.*;
import search.*;
import basicinfo.*;
import revise.*;

abstract class QueryNode {
    public abstract SentenceResult evaluate(SynTree sparse);
    public abstract void PrintToSystemErr();
    Vector args_for_same;
    Vector curlies_list; 
    public static History hist;

    public static SentenceResult Record (SentenceResult sr) {
      hist.addSentenceResult(sr);
      return(sr); }
}

class NotNode extends QueryNode {
    protected QueryNode qn;

    protected NotNode (QueryNode qn1) {
        this.qn = qn1;
	this.args_for_same = qn1.args_for_same;
	this.curlies_list = qn1.curlies_list;
//	this.PrintToSystemErr();
    }

    public SentenceResult evaluate(SynTree sparse) {
        SentenceResult sr;

	sr = (this.qn).evaluate(sparse);
	return Record(Logicks.Not(sparse, sr, args_for_same.size(), hist)); }

    public void PrintToSystemErr() {
        System.err.println("NotNode:"); 
	System.err.println("args_for_same.size():  " + args_for_same.size()); }
}

abstract class BinaryLogicNode extends QueryNode{ //AND, OR, XOR.

    protected BinaryLogicNode() {}

    protected BinaryLogicNode (LinkedList qnodes) 
        { Init(qnodes); }
    
    protected void Init (LinkedList qnodes) {
        QueryNode qn;
        int i, j;
	Vector qn_same;
	Vector qn_curl;

        this.qnodes = qnodes;
        if (qnodes.size() > 0) {
            this.qn1 = (QueryNode)qnodes.get(0); }
        if (qnodes.size() > 1) {
            this.qn2 = (QueryNode)qnodes.get(1); }
	this.args_for_same = new Vector();
	this.curlies_list = new Vector();
	for (i = 0; i < qnodes.size(); i++) {
	    qn = (QueryNode)qnodes.get(i);
	    qn_same = qn.args_for_same;
	    qn_curl = qn.curlies_list;
	    for (j = 0; j < qn_same.size(); j++) {
	        (this.args_for_same).addElement((String)qn_same.elementAt(j)); }
	    for (j = 0; j < qn_curl.size(); j++) {
	        (this.curlies_list).addElement((String)qn_curl.elementAt(j)); }
        }
    }

    public void PrintToSystemErr() {
        System.err.println("BinaryLogicNode:  "); }

    protected QueryNode qn1;
    protected QueryNode qn2;
    protected LinkedList qnodes;
}

class AndNode extends BinaryLogicNode {
    SameList list_o_same;

    public AndNode(LinkedList qnodes) 
        { super.Init(qnodes); } 
	  //this.PrintToSystemErr();}

    public SentenceResult evaluate(SynTree sparse) {
	SentenceResult sr1, sr2, sr3, sr4;
	Vector arg_List;
	int qdex;
	QueryNode qn3;  

	sr1  = (this.qn1).evaluate(sparse);
	if ((this.qnodes).size() == 1) { return sr1; }
	sr2 = (this.qn2).evaluate(sparse);
	args_for_same = new Vector();
	this.addToArgsList(this.qn1, args_for_same);
	this.addToArgsList(this.qn2, args_for_same);
	list_o_same = Commander.Sameness(args_for_same);
	sr3 = (Logicks.And(sr1, sr2, list_o_same));
        for (qdex = 2; qdex < (this.qnodes).size(); qdex++) {
	    qn3 = (QueryNode)qnodes.get(qdex);
	    addToArgsList(qn3, args_for_same);
	    list_o_same = Commander.Sameness(args_for_same);
	    sr4 = qn3.evaluate(sparse);
	    sr3 = (Logicks.And(sr3, sr4, list_o_same)); }
	return sr3; 
    }

    private void addToArgsList (QueryNode qn, Vector arg_list) {
 
        for (int i = 0; i < (qn.args_for_same).size(); i++) {
	    arg_list.addElement((String)(qn.args_for_same).elementAt(i)); }
	return; }

    public void PrintToSystemErr() {
        System.err.println("AndNode:"); }
}

class OrNode extends BinaryLogicNode{

      public OrNode(LinkedList qnodes)
        { super.Init(qnodes); }
          //this.PrintToSystemErr();}

      public SentenceResult evaluate(SynTree sparse) {
	SentenceResult sr1, sr2, sr3, sr4;
	QueryNode qn3;
	int qdex;
	
	sr1  = (this.qn1).evaluate(sparse);
	if ((this.qnodes).size() == 1) {
	  return sr1; }
	sr2 = (this.qn2).evaluate(sparse);
        sr3 = (Logicks.Or(sr1, sr2));
	for (qdex = 2; qdex < (this.qnodes).size(); qdex++) {
            qn3 = (QueryNode)qnodes.get(qdex);
            sr4 = qn3.evaluate(sparse);
            sr3 = (Logicks.Or(sr3, sr4)); }
	return sr3; }

      public void PrintToSystemErr() {
          System.err.println("OrNode:  "); }
}

class ArgNode extends QueryNode{
     String args;
     // prefix_args is used for the same_list.  It's args with prefix,
     // if  one exists.
     String prefix_args, prefix, curlies; 
     ArgList args_for_search;
     boolean denied = false;

    public ArgNode(String argo, boolean is_denied, String prefox,
                   String curlies) {
        if (is_denied) { this.prefix_args = prefox + "!" + argo; }
	else { this.prefix_args = prefox + argo; }
	this.args = argo;
	this.curlies = curlies;
	this.denied = is_denied;
	this.prefix = prefox;
	this.args_for_search = new ArgList(this.args);
	CommandAux.CheckListForIgnore(this.args_for_search);
	//this.PrintToSystemErr();
    }

    public boolean IsDenied () 
        { return denied; }
    
    // "evaluate" is here so that ArgNode can inherit
    // from QueryNode.  It is never called.
    public SentenceResult evaluate (SynTree sparse) {
      SentenceResult sr = new SentenceResult();
      return sr; }

    public void PrintToSystemErr() {
        System.err.println("ArgNode:  ");
	System.err.println("curlies:  " + this.curlies);
	System.err.println("args_for_search: " + args_for_search);
	System.err.println(""); }
}

class IntArgNode{
    int int_arg;
    Integer arg_Int;

    public IntArgNode(String argo) {
        arg_Int = new Integer(argo);
	int_arg = arg_Int.intValue();
        //this.PrintToSystemErr();
    }

    public void PrintToSystemErr() {
        System.err.println("IntArgNode:  ");
        System.err.println(int_arg); }
}

abstract class ThreeListsNode extends QueryNode { // iDomsMod
    ArgNode arg1, arg2, arg3;
    ArgList x_List, y_List, z_List;
    
    protected ThreeListsNode () {}

    protected ThreeListsNode(ArgNode arg1, ArgNode arg2, ArgNode arg3)
        { Init(arg1, arg2, arg3); }

    protected void Init(ArgNode arg1, ArgNode arg2, ArgNode arg3) {
        this.arg1 = arg1;
        this.arg2 = arg2;
	this.arg3 = arg3;
        this.x_List = arg1.args_for_search;
        this.y_List = arg3.args_for_search;
	this.z_List = arg2.args_for_search;
        this.args_for_same = new Vector();
        args_for_same.addElement(arg1.prefix_args);
        args_for_same.addElement(arg3.prefix_args);
	this.curlies_list = new Vector();
	curlies_list.addElement(arg1.curlies);
	curlies_list.addElement(arg3.curlies);
//        this.PrintToSystemErr();
    }

    public void PrintToSystemErr() {
        System.err.println("ThreeListsNode:  ");
        System.err.println("x_List: " + this.x_List);
        System.err.println("y_List: " + this.y_List);
	System.err.println("z_List: " + this.z_List); }
}


abstract class TrinarySearchNode extends QueryNode { 
    ArgNode arg1, arg2;
    ArgList x_List, y_List;
    IntArgNode intarg1;
    int arg_int;

    protected TrinarySearchNode() {}

    protected TrinarySearchNode(ArgNode arg1, IntArgNode intarg1, 
                                ArgNode arg2) 
        { Init(arg1, intarg1, arg2); }

    protected void Init(ArgNode arg1, IntArgNode intarg1, ArgNode arg2) {
        this.arg_int = intarg1.int_arg;
	this.arg1 = arg1;
	this.arg2 = arg2;
	this.x_List = arg1.args_for_search;
	this.y_List = arg2.args_for_search;
	this.args_for_same = new Vector();
	args_for_same.addElement(arg1.prefix_args);
	args_for_same.addElement(arg2.prefix_args);
	this.curlies_list = new Vector();
	curlies_list.addElement(arg1.curlies);
	curlies_list.addElement(arg2.curlies);
//        this.PrintToSystemErr();
    }

    public void PrintToSystemErr() {
        System.err.println("TrinarySearchNode:  ");
	System.err.println("x_List: " + this.x_List);
	System.err.println("y_List: " + this.y_List);
	System.err.println("arg_int: " + this.arg_int); }
}

abstract class BinarySearchNode extends QueryNode {
    ArgNode arg1, arg2;
    ArgList x_List, y_List;
    
    protected BinarySearchNode() {}

    protected BinarySearchNode(ArgNode arg1, ArgNode arg2)
        { Init(arg1, arg2); }

    protected void Init(ArgNode arg1, ArgNode arg2) {
        this.arg1 = arg1;
	this.arg2 = arg2;
        this.x_List = arg1.args_for_search;
        this.y_List = arg2.args_for_search;
        this.args_for_same = new Vector();
	args_for_same.addElement(arg1.prefix_args);
	args_for_same.addElement(arg2.prefix_args);
	this.curlies_list = new Vector();
	curlies_list.addElement(arg1.curlies);
	curlies_list.addElement(arg2.curlies);
        //this.PrintToSystemErr();
    }
    
    public void PrintToSystemErr () {
        System.err.println("in BinarySearchNode:  ");
	System.err.println("x_List:  " + x_List);
	System.err.println("y_list:  " + y_List);
	System.err.println("args_for_same: " + args_for_same); }
}

abstract class IntBinarySearchNode extends QueryNode { // DomsWords, DomsWordsLess...
    ArgNode arg1;
    IntArgNode intarg1;
    ArgList x_List;
    int arg_int;

    protected IntBinarySearchNode() {}

    protected IntBinarySearchNode(ArgNode arg1, IntArgNode intarg1)
        { Init(arg1, intarg1); }

    protected void Init(ArgNode arg1, IntArgNode intarg1) {
        this.arg1 = arg1;
        this.intarg1 = intarg1;
        this.x_List = arg1.args_for_search;
        this.arg_int = intarg1.int_arg;
        this.args_for_same = new Vector();
        args_for_same.addElement(arg1.prefix_args);
	args_for_same.addElement(arg1.prefix_args);
	this.curlies_list = new Vector();
	curlies_list.addElement(arg1.curlies);
	curlies_list.addElement(arg1.curlies);
        //this.PrintToSystemErr();
    }

    public void PrintToSystemErr () {
        System.err.println("in IntBinarySearchNode:  ");
        System.err.println("x_List:  " + x_List);
        System.err.println("args_for_same: " + args_for_same);
	System.err.println("arg_int: " + arg_int); }
}

/* the following SHAMELESS HACK was implemented to deal with the 
too-many-tokens problem.  I found that javacc could not handle more tokens 
normally.  To work around this, I collapsed several tokens together, 
to be differentiated later in the program. */

abstract class HackIntBinarySearchNode extends QueryNode { 
// DomsWords, DomsWordsLess...
    ArgNode arg1;
    IntArgNode intarg1;
    ArgList x_List;
    String which_search;
    int arg_int;

    protected HackIntBinarySearchNode() {}

    protected HackIntBinarySearchNode(ArgNode arg1, IntArgNode intarg1, 
                                      String ws)
        { Init(arg1, intarg1, ws); }

    protected void Init(ArgNode arg1, IntArgNode intarg1, String ws) {
	this.which_search = ws;
        this.arg1 = arg1;
        this.intarg1 = intarg1;
        this.x_List = arg1.args_for_search;
        this.arg_int = intarg1.int_arg;
        this.args_for_same = new Vector();
        args_for_same.addElement(arg1.prefix_args);
	args_for_same.addElement(arg1.prefix_args);
	this.curlies_list = new Vector();
	curlies_list.addElement(arg1.curlies);
	curlies_list.addElement(arg1.curlies);
        //this.PrintToSystemErr();
    }

    public void PrintToSystemErr () {
        System.err.println("in HackIntBinarySearchNode:  ");
	System.err.println("which_search: " + which_search);
        System.err.println("x_List:  " + x_List);
        System.err.println("args_for_same: " + args_for_same);
	System.err.println("arg_int: " + arg_int); }
}

abstract class UnarySearchNode extends QueryNode { // isRoot, Exists
    ArgNode arg1;
    ArgList x_List;

    protected UnarySearchNode() {}

    protected UnarySearchNode(ArgNode arg1)
        { Init(arg1); }

    protected void Init(ArgNode arg1) {
        this.arg1 = arg1;
        this.x_List = arg1.args_for_search;
        this.args_for_same = new Vector();
        args_for_same.addElement(arg1.prefix_args);
	args_for_same.addElement(arg1.prefix_args);
	this.curlies_list = new Vector();
	curlies_list.addElement(arg1.curlies);
	curlies_list.addElement(arg1.curlies);
  //      this.PrintToSystemErr();
    }

    public void PrintToSystemErr () {
        System.err.println("in UnarySearchNode:  ");
        System.err.println("x_List:  " + x_List);
        System.err.println("args_for_same: " + args_for_same); }
}

class iDomsModNode extends ThreeListsNode {
      
    public iDomsModNode (ArgNode arg1, ArgNode arg2, ArgNode arg3)
        { super.Init(arg1, arg2, arg3); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied())  
	   { return Record(iDomsMod.Not_x(sparse, x_List, z_List, y_List)); }
        if (arg3.IsDenied()) 
           { return Record(iDomsMod.Not_y(sparse, x_List, z_List, y_List)); }
        return Record(iDomsMod.Plain(sparse, x_List, z_List, y_List)); }
}

class iDomsViaTraceNode extends ThreeListsNode {
      
    public iDomsViaTraceNode (ArgNode arg1, ArgNode arg2, ArgNode arg3)
        { super.Init(arg1, arg2, arg3); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied())  
	   { return Record(iDomsViaTrace.Not_x(sparse, x_List, z_List, y_List)); }
        if (arg3.IsDenied()) 
           { return Record(iDomsViaTrace.Not_y(sparse, x_List, z_List, y_List)); }
        return Record(iDomsViaTrace.Plain(sparse, x_List, z_List, y_List)); }
}


class IsRootNode extends UnarySearchNode {

    public IsRootNode (ArgNode arg1) 
        { super.Init(arg1); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied())
	    { return Record(isRoot.Not_x(sparse, x_List)); }
	return Record(isRoot.Plain(sparse, x_List)); }
}

class ExistsNode extends UnarySearchNode {

    public ExistsNode (ArgNode arg1) 
        { super.Init(arg1); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied()) 
            { return Record(Exists.Not_x(sparse, x_List)); }
        return Record(Exists.Plain(sparse, x_List)); }
}

class inIDNode extends UnarySearchNode {

    public inIDNode (ArgNode arg1) 
        { super.Init(arg1); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied()) 
            { return Record(inID.Not_x(sparse, x_List)); }
        return Record(inID.Plain(sparse, x_List)); }
}

class ColumnNode extends TrinarySearchNode {

    public ColumnNode (ArgNode arg1, IntArgNode arg2, ArgNode arg3) 
        { super.Init(arg1, arg2, arg3); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg2.IsDenied())
            { return Record(Column.Not_y(sparse, x_List, arg_int, y_List)); }
        return Record(Column.Plain(sparse, x_List, arg_int, y_List)); }
}


class iDomsNumberNode extends TrinarySearchNode {

    public iDomsNumberNode (ArgNode arg1, IntArgNode arg2, ArgNode arg3) 
        { super.Init(arg1, arg2, arg3); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg2.IsDenied()) 
	    { return Record(iDomsNumber.Not_y(sparse, x_List, y_List, arg_int)); } 
        return Record(iDomsNumber.Plain(sparse, x_List, y_List, arg_int)); }
}

class NeighborhoodNode extends TrinarySearchNode {

    public NeighborhoodNode (ArgNode arg1, IntArgNode arg2, ArgNode arg3) 
        { super.Init(arg1, arg2, arg3); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg2.IsDenied()) 
	    { return Record(Neighborhood.Not_y(sparse, x_List, y_List, arg_int)); } 
        return Record(Neighborhood.Plain(sparse, x_List, y_List, arg_int)); }
}

class DomsWordsStuffNode extends HackIntBinarySearchNode {
    
    public DomsWordsStuffNode (ArgNode arg1, IntArgNode intarg1, String which)
        { super.Init(arg1, intarg1, which); }

    public SentenceResult evaluate(SynTree sparse) {
        return Record(DomsWordsAssign.Plain(sparse, x_List, 
					    arg_int, which_search)); }
}

class iDomsTotalStuffNode extends HackIntBinarySearchNode {
    
    public iDomsTotalStuffNode (ArgNode arg1, IntArgNode intarg1, String which)
        { super.Init(arg1, intarg1, which); }

    public SentenceResult evaluate(SynTree sparse) {
        return Record(iDomsTotalAssign.Plain(sparse, x_List, 
					    arg_int, which_search)); }
}

class CCommandsNode extends BinarySearchNode {

    public CCommandsNode (ArgNode arg1, ArgNode arg2)
        { super.Init(arg1, arg2); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied())
          { return Record(CCommands.Not_x(sparse, x_List, y_List)); }
        if (arg2.IsDenied())
          { return Record(CCommands.Not_y(sparse, x_List, y_List)); }
        return Record(CCommands.Plain(sparse, x_List, y_List)); }
}


class DomsNode extends BinarySearchNode {

    public DomsNode (ArgNode arg1, ArgNode arg2)
        { super.Init(arg1, arg2); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied()) 
	    { return Record(Dominates.Not_x(sparse, x_List, y_List)); }
        if (arg2.IsDenied())
	    { return Record(Dominates.Not_y(sparse, x_List, y_List)); }
        return Record(Dominates.Plain(sparse, x_List, y_List)); }
}

class DomsTNode extends BinarySearchNode {

    public DomsTNode (ArgNode arg1, ArgNode arg2)
        { super.Init(arg1, arg2); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied()) 
	    { return Record(DominatesT.Not_x(sparse, x_List, y_List)); }
        if (arg2.IsDenied())
	    { return Record(DominatesT.Not_y(sparse, x_List, y_List)); }
        return Record(DominatesT.Plain(sparse, x_List, y_List)); }
}

class iDomsNode extends BinarySearchNode {

    public iDomsNode(ArgNode arg1, ArgNode arg2)
        { super.Init(arg1, arg2); }
      
    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied())
	    { return Record(iDominates.Not_x(sparse, x_List, y_List)); }
	if (arg2.IsDenied())
	    { return Record(iDominates.Not_y(sparse, x_List, y_List)); }
	return Record(iDominates.Plain(sparse, x_List, y_List)); }
}

class iDomsLastNode extends BinarySearchNode {

    public iDomsLastNode(ArgNode arg1, ArgNode arg2)
        { super.Init(arg1, arg2); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied())
           { return Record(iDomsLast.Not_x(sparse, x_List, y_List)); }
        if (arg2.IsDenied())
           { return Record(iDomsLast.Not_y(sparse, x_List, y_List)); }
        return Record(iDomsLast.Plain(sparse, this.x_List, this.y_List)); }
}

class iDomsFirstNode extends BinarySearchNode {

    public iDomsFirstNode(ArgNode arg1, ArgNode arg2)
        { super.Init(arg1, arg2); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied())
          { return Record(iDomsFirst.Not_x(sparse, x_List, y_List)); }
        if (arg2.IsDenied())
          { return Record(iDomsFirst.Not_y(sparse, x_List, y_List)); }
        return Record(iDomsFirst.Plain(sparse, this.x_List, this.y_List)); }
}

class iDomsOnlyNode extends BinarySearchNode {

    public iDomsOnlyNode(ArgNode arg1, ArgNode arg2)
        { super.Init(arg1, arg2); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied())
          { return Record(iDomsOnly.Not_x(sparse, x_List, y_List)); }
        if (arg2.IsDenied())
          { return Record(iDomsOnly.Not_y(sparse, x_List, y_List)); }
        return Record(iDomsOnly.Plain(sparse, this.x_List, this.y_List)); }
}

class iDomsTNode extends BinarySearchNode {

    public iDomsTNode(ArgNode arg1, ArgNode arg2)
        { super.Init(arg1, arg2); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied())
          { return Record(iDomsT.Not_x(sparse, x_List, y_List)); }
        if (arg2.IsDenied())
          { return Record(iDomsT.Not_y(sparse, x_List, y_List)); }
        return Record(iDomsT.Plain(sparse, this.x_List, this.y_List)); }
}


class HasSisterNode extends BinarySearchNode {

    public HasSisterNode(ArgNode arg1, ArgNode arg2)
        { super.Init(arg1, arg2); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied())
            { return Record(HasSister.Not_x(sparse, x_List, y_List)); }
        if (arg2.IsDenied())
            { return Record(HasSister.Not_y(sparse, x_List, y_List)); }
        return Record(HasSister.Plain(sparse, x_List, y_List)); }
}


class PresNode extends BinarySearchNode {

    public PresNode(ArgNode arg1, ArgNode arg2)
        { super.Init(arg1, arg2); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied())
	    { return Record(Precedes.Not_x(sparse, x_List, y_List)); }
	if (arg2.IsDenied())
	    { return Record(Precedes.Not_y(sparse, x_List, y_List)); }
	return Record(Precedes.Plain(sparse, x_List, y_List)); }
}

class iPresNode extends BinarySearchNode {

    public iPresNode(ArgNode arg1, ArgNode arg2)
        { super.Init(arg1, arg2); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied())
	    { return Record(iPrecedes.Not_x(sparse, x_List, y_List)); }
	if (arg2.IsDenied())
	    { return Record(iPrecedes.Not_y(sparse, x_List, y_List)); }
        return Record(iPrecedes.Plain(sparse, x_List, y_List)); }
}

class SameIndexNode extends BinarySearchNode {

    public SameIndexNode(ArgNode arg1, ArgNode arg2)
        { super.Init(arg1, arg2); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied())
            { return Record(SameIndex.Not_x(sparse, x_List, y_List)); }
        if (arg2.IsDenied())
            { return Record(SameIndex.Not_y(sparse, x_List, y_List)); }
        return Record(SameIndex.Plain(sparse, x_List, y_List)); }
}

class HasLabelNode extends BinarySearchNode {

    public HasLabelNode(ArgNode arg1, ArgNode arg2)
        { super.Init(arg1, arg2); }

    public SentenceResult evaluate(SynTree sparse) {
        if (arg1.IsDenied())
            { return Record(hasLabel.Not_x(sparse, x_List, y_List)); }
        if (arg2.IsDenied())
            { return Record(hasLabel.Not_y(sparse, x_List, y_List)); }
        return Record(hasLabel.Plain(sparse, x_List, y_List)); }
}


public class ParseQuery {
  public static QueryNode qn;

  public static QueryNode makeQueryTree(StringReader sread) 
      throws ParseException{
      
          qn.hist = new History();
          ParseQuery parser = new ParseQuery(sread);
          qn = parser.OrQuery();
	  //qn = parser.AndQuery();
	  parser.FlushQuery();
	  //System.err.println("qn.curlies_list:  " + qn.curlies_list);
	  //System.err.println("WOMBATS ARE US!");
	  CommandInfo.curlies = qn.curlies_list;
          return qn; }

  public static SentenceResult evaluable (SynTree sparse) {
      (qn.hist).removeAllElements();
      return (qn.evaluate(sparse)); }

  public static History getHistory () {
      return (qn.hist); }

}

PARSER_END(ParseQuery)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

SKIP :
{  "/*" : WithinComment }
<WithinComment> SKIP :
{"*/" : DEFAULT }
<WithinComment> MORE :
{ <~[]> }

SKIP:
{ <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> }

TOKEN :
{
  < OPEN_PAREN: "(" >
| < CLOSE_PAREN: ")" >
| < CCOMMANDS: "CCommands"|"ccommands"|"cCommands"|"CCOMMANDS" >
| < ISROOT: "isRoot"|"IsRoot"|"isroot"|"ISROOT" >
| < EXISTS: "Exists"|"exists"|"EXISTS" >
| < IPRES: "iPrecedes"|"iPres"|"ipres"|"iprecedes"|"IPRECEDES"|"IPRES" >
| < HASSISTER: "HasSister"|"hasSister"|"hassister"|"HASSISTER" >
| < HASLABEL: "HasLabel"|"hasLabel"|"haslabel" >
| < PRES: "Precedes"|"Pres"|"pres"|"precedes"|"PRECEDES"|"PRES" >
| < IDOMS: "iDominates"|"iDoms"|"idominates"|"idoms"|"IDOMS"|"IDOMINATES" >
| < IDOMSMOD: "iDomsMod"|"idomsmod"|"IDOMSMOD" >
| < IDOMSLAST: "iDomsLast"|"idomslast"|"IDOMSLAST" >
| < IDOMSFIRST: "iDomsFirst"|"idomsfirst"|"IDOMSFIRST" >
| < IDOMSONLY: "iDomsOnly"|"idomsonly"|"IDOMSONLY" >
//| < IDOMST: "iDomsT"|"idomst"|"IDOMST"|"iDomst">
| < IDOMSVIATRACE: "idomsviatrace"|"iDomsViaTrace" >
| < DOMST: "DomsT"|"domst"|"DOMST"|"dominatesT"|"DominatesT" >
| < DOMS: "Dominates"|"Doms"|"doms"|"dominates"|"DOMINATES"|"DOMS" >
| < SAMEINDEX: "SameIndex"|"sameindex"|"sameIndex"|"SAMEINDEX" >
| < IDOMSNUMBER: "iDomsNumber"|"iDomsNum"|"idomsnumber"|"idomsnum"|"IDOMSNUM" >
| < NEIGHBORHOOD: "neighborhood" >
| < COLUMN: "Column"|"Col"|"column"|"col"|"COL"|"COLUMN" >
| < IDOMSTOTALSTUFF: "iDomsTotal"|"idomstotal"|"iDomsTotal>"|"idomstotal>"|"iDomsTotal<"|"idomstotal<">
| <DOMSWORDSSTUFF: "DomsWords"|"domsWords"|"domswords"|"DomsWords<"|"domsWords<"|"domswords<"|"DomsWords>"|"domsWords>"|"domswords>"|"domsWordsMore"|"domsWordsLess"|"domswordsmore"|"domswordsless">
| < INID: "inID"|"InID"|"INID" >
}

TOKEN: {
  < AND: "AND" >
| < OR: "OR" >
| < NOT: "NOT" >
| < NOT_ARG: "!" >
| < PREFIX: "[" ["1"-"9"] (["0"-"9"])* "]" >
| < CURLY_LIST: "{" (["1"-"9"])+ (" ")*(", ")* (["0"-"9"])* "}" >
}



TOKEN: /* Search-function arguments*/
{
    < INTARG: ["1"-"9"](["0"-"9"])* >  
|   < ARG: (~["(", ")", "{", "}", " ", "!"])* > } 

/*
This causes an error message to be printed
to the screen in case of an unknown token.
*/
TOKEN: 
{ < UNKNOWN: ~[] > }

void FlushQuery() :
{ }
{   <EOF> { return; }  }
   

QueryNode OrQuery() :
{    QueryNode qn1, qn2;  
     LinkedList qnodes = new LinkedList(); }
{
     qn1=AndQuery() (<OR> qn2=AndQuery(){ qnodes.add(qn2); })* {
        qnodes.add(0, qn1);
        return new OrNode(qnodes); }
}

QueryNode AndQuery():
{
    QueryNode qn1, qn2;
    LinkedList qnodes = new LinkedList();
}
{
    qn1=NotQuery() (<AND> qn2=NotQuery() { qnodes.add(qn2); } )*
    {
        qnodes.add(0, qn1);
	return new AndNode(qnodes);
    }
}

QueryNode NotQuery():
{
    QueryNode qn;
}
{
  <NOT> qn=Atom_Stmt() 
        { return new NotNode(qn); }
    | 
	qn=Atom_Stmt()
       { return (qn); }
}

QueryNode Atom_Stmt():
{
    QueryNode qn;
    ArgNode arg1;
}
{
  <OPEN_PAREN>qn=OrQuery()<CLOSE_PAREN> 
        { return qn; }
    | 
	arg1=Arg() qn=UnBinTriCall(arg1)
        { return qn; }
}

QueryNode UnBinTriCall(ArgNode arg1):
{
   QueryNode qn;
   Token sf_token=null;
   ArgNode arg2, arg3;
   IntArgNode int_arg;
}
{
// Unary Call.
    sf_token=<ISROOT>
        { return new IsRootNode(arg1); }
    | sf_token=<EXISTS>
        { return new ExistsNode(arg1); }
    | sf_token=<INID>
        { return new inIDNode(arg1); }
// Binary Call.
    | sf_token=<IDOMS> arg2=Arg()
        { return new iDomsNode(arg1, arg2); }
    | sf_token=<IDOMSLAST> arg2=Arg()
        { return new iDomsLastNode(arg1, arg2); }
    | sf_token = <IDOMSFIRST> arg2=Arg()
        { return new iDomsFirstNode(arg1, arg2); }
    | sf_token = <IDOMSONLY> arg2 = Arg()
        { return new iDomsOnlyNode(arg1, arg2); }
    //| sf_token = <IDOMST> arg2 = Arg()
      //  { return new iDomsTNode(arg1, arg2); }
    | sf_token=<DOMS> arg2=Arg()
        { return new DomsNode(arg1, arg2); }
    | sf_token=<DOMST> arg2=Arg()
        { return new DomsTNode(arg1, arg2); }	
    | sf_token=<IPRES> arg2=Arg()
        { return new iPresNode(arg1, arg2); }
    | sf_token=<HASSISTER> arg2=Arg()
        { return new HasSisterNode(arg1, arg2); }
    | sf_token=<HASLABEL> arg2=Arg()
        { return new HasLabelNode(arg1, arg2); }
    | sf_token=<PRES> arg2=Arg()   
        { return new PresNode(arg1, arg2); }
    | sf_token=<CCOMMANDS> arg2=Arg()
        { return new CCommandsNode(arg1, arg2); }
    | sf_token=<SAMEINDEX> arg2=Arg()
        { return new SameIndexNode(arg1, arg2); }
// HackIntBinaryCall.
    | sf_token=<DOMSWORDSSTUFF> int_arg=IntArg()
        { return(new DomsWordsStuffNode(arg1, int_arg, sf_token.toString())); }
    | sf_token=<IDOMSTOTALSTUFF> int_arg=IntArg()
        { return(new iDomsTotalStuffNode(arg1, int_arg, 
                                         sf_token.toString())); }
// Trinary Call.
    | sf_token=<IDOMSNUMBER> int_arg=IntArg() arg2=Arg()
        { return(new iDomsNumberNode(arg1, int_arg, arg2)); }
    | sf_token=<NEIGHBORHOOD> int_arg=IntArg() arg2=Arg()
	{ return(new NeighborhoodNode(arg1, int_arg, arg2)); }
    | sf_token=<COLUMN> int_arg=IntArg() arg2=Arg()
        { return(new ColumnNode(arg1, int_arg, arg2)); }
// Three Lists Call.
    | sf_token=<IDOMSVIATRACE> arg2=Arg() arg3=Arg()
        { return(new iDomsViaTraceNode(arg1, arg2, arg3)); }
    | sf_token=<IDOMSMOD> arg2=Arg() arg3=Arg()
        { return(new iDomsModNode(arg1, arg2, arg3)); }
}

IntArgNode IntArg():
{
    IntArgNode ian;
    Token sf_token=null;
    String sf_int;
}
{
    sf_token=<INTARG>
    {
        sf_int = sf_token.toString();
	ian = new IntArgNode(sf_int);
	return ian;
    }
}

ArgNode Arg():
{
    ArgNode an;
    Token sf_token=null;
    Token sf_token_pre=null;
    Token sf_token_curly=null;
    String sf_name;
    String sf_curly;
}
{
    sf_token_pre=<PREFIX> an=PreArg(sf_token_pre.toString())
        { return an; }
    | sf_token=<ARG> {
        sf_name = sf_token.toString();
        an = new ArgNode(sf_name, false, "", "");
        return an; }
    |<NOT_ARG> an=NotArg() 
        { return an; }
    | sf_token_curly=<CURLY_LIST> an=CurlyArg(sf_token_curly.toString())
        { return an; }
}

ArgNode PreArg(String sf_prefix):
{
    ArgNode an;
    Token sf_token=null;
    Token sf_token_curly= null;
    String sf_name;
    String sf_curly;
}
{   sf_token=<ARG> {
        sf_name = sf_token.toString();
	an = new ArgNode(sf_name, false, sf_prefix, "");
	return an; }
    | <NOT> sf_token=<ARG> {
        sf_name = sf_token.toString();
        an = new ArgNode(sf_name, true, sf_prefix, "");
        return an; }
    | sf_token_curly=<CURLY_LIST> sf_token=<ARG> {
        sf_name = sf_token.toString();
	sf_curly = sf_token_curly.toString();
	an = new ArgNode(sf_name, false, sf_prefix, sf_curly);
	return an; }
}        


ArgNode NotArg():
{
    ArgNode an;
    Token sf_token=null;
    Token sf_token_curly=null;
    Token sf_token_pre=null;
    String sf_prefix;
    String sf_name;
    String sf_curly;
}
{   sf_token =<ARG> {
        sf_name = sf_token.toString();
        an = new ArgNode(sf_name, true, "", "");
        return an; }
    | sf_token_pre=<PREFIX> sf_token=<ARG> {
        sf_name = sf_token.toString();
        sf_prefix = sf_token_pre.toString();
        an = new ArgNode(sf_name, true, sf_prefix, "");
        return an; }
    | sf_token_curly=<CURLY_LIST> sf_token=<ARG> {
        sf_name = sf_token.toString();
	sf_curly = sf_token_curly.toString();
        an = new ArgNode(sf_name, true, "", sf_curly);
        return an; }
}

ArgNode CurlyArg(String curlies):
{
    ArgNode an;
    Token sf_token=null;
    Token sf_token_pre=null;
    String sf_prefix;
    String sf_name;
}
{   sf_token =<ARG> {
        sf_name = sf_token.toString();
        an = new ArgNode(sf_name, false, "", curlies);
        return an; }
    | sf_token_pre=<PREFIX> sf_token=<ARG> {
        sf_name = sf_token.toString();
        sf_prefix = sf_token_pre.toString();
        an = new ArgNode(sf_name, false, sf_prefix, curlies);
        return an; }
    | <NOT> sf_token=<ARG> {
  	sf_name = sf_token.toString();
    	an = new ArgNode(sf_name, true, "", "");
      	return an; }
}
