
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
	JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(ParseQuery)

public class  ParseQuery {

  public static void main(String args[]) throws ParseException {
    ParseQuery parser = new ParseQuery(System.in);
    parser.Or_Stmt();
    System.err.println("Parsed OK.");
	//System.err.println("WOMBATS ARE US!");
  }

}

PARSER_END(ParseQuery)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < OPEN_PAREN: "(" >
| < CLOSE_PAREN: ")" >
| < BIN: "iPrecedes"|"iDominates"|"Dominates" >
| < UN: "Exists" >
| < AND: "AND" >
| < OR: "OR" >
| < NOT: "NOT" >
| < NOT_ARG: "!" >
| < PREFIX: "[" ["1"-"9"] (["0"-"9"])* "]" >
}

TOKEN : /* Search-function arguments*/
{
  < ARG: (<LETTER>|<DIGIT>|<WILDCARD>)+ >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
 < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
|
 < #WILDCARD:
      [
       "*"
      ]
 >
}






void Or_Stmt() :
{}
{
And_Stmt() (<OR> And_Stmt())*
}



void And_Stmt():
{}
{
Atomic_Stmt() (<AND> Atomic_Stmt())*
}

void Atomic_Stmt():
{}
{
<OPEN_PAREN>After_OpenParen()
| <NOT><OPEN_PAREN>After_OpenParen()
}

void After_OpenParen():
{}
{
Or_Stmt()<CLOSE_PAREN>
| Arg() Call()
}

void Call():
{}
{
<BIN> Arg() <CLOSE_PAREN>
| <UN> <CLOSE_PAREN>

}

void Arg():
{}
{
<ARG>
|<PREFIX> <ARG>
|<NOT_ARG> <ARG>
}

