#
# this is a strex properties file, which defines options
# associated with running strex
#

#
# A StringTestFactory just checks equality of strings in patterns
# against node labels in trees
# you can also use edu.upenn.cis.strex.nodetests.RegexpFactory
# write your own and put the .class file in classes/edu/upenn/cis/strex/nodetests/
#
# available nodetest factories are
# edu.upenn.cis.strex.nodetests.{StringTestFactory,
#                                SubStringTestFactory,
#                                PrefixStringTestFactory,
#                                RegexpTestFactory}
#
strex.nodetestfactory=edu.upenn.cis.strex.nodetests.PrefixStringTestFactory

#
# A DirTreeFactory just makes a tree rooted at a directory in a filesystem
# where filenames are the node labels. You can also use
# edu.upenn.cis.strex.treeclasses.DomTreeFactory which creates a tree
# from a xml file.  Also available is 
# edu.upenn.cis.strex.treeclasses.TBTreeFactory, which takes a sentence
# identifier in the form of a filename and sentence number (Starting with
# zero as an argument.
# Finally, there's a WordFreakTreeSourceFactory which instantiates from
# the name of a wordfreak .ann file.
#
strex.treesourcefactory=edu.upenn.cis.strex.treesources.TBTreeSourceFactory


#
# formatters format the output of a query A TextFormatter outputs
# an xml file with the trees formatted in treebank style.  An
# XMLFormatter outputs the same thing with nested <node label="foo">
# elements to describe the tree.  A TreeStandoffFormatter outputs
# filename, tree index pairs along with pairs of terminal number,
# height for each variable, a la propbank
#
strex.matchformatter=edu.upenn.cis.strex.formatters.TextFormatter
#strex.matchformatter=edu.upenn.cis.strex.formatters.XMLFormatter
#strex.matchformatter=edu.upenn.cis.strex.formatters.TreeStandoffFormatter

#
# the endoing of the input and output files
#
strex.encoding=ISO-8859-1
